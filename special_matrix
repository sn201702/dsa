import java.io.*;
import java.util.*;

class Solution{

//However there is also an optimized version of the code which is as follows and has a time complexity of O(n)
/*static boolean special(int arr[][], int n) {
    // Check diagonal elements
    for (int i = 0; i < n; i++) {
        if (arr[i][i] != 0 || arr[i][n - i - 1] != 0) {
            return false;
        }
    }

    // Check non-diagonal elements
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i != j && i != n - j - 1 && arr[i][j] == 0) {
                return false;
            }
        }
    }

    return true;
}*/

    static boolean special(int arr[][], int n){
         //Write code here
		boolean check=true;
		for(int i=0;i<arr.length;i++)
			{
				for(int j=0;j<arr[0].length;j++)
					{
						if(i==j && arr[i][j]!=0)
						{
							check=true;
						}
						else if(i+j==n-1 && arr[i][j]!=0)
						{
							check=true;
						}
						else if(i!=j && i+j!=n-1 && arr[i][j]==0){
							check=true;
						}
						else{
							check=false;
							break;
						}
					}
				if(check==false){
					break;
				}
			}
        return check;
    }
}
class Main{
    public static void main(String args[])throws IOException{
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t-- > 0){
            int n = sc.nextInt();
            int matrix[][] = new int[n][n];
            
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++)
                 matrix[i][j] = sc.nextInt();
            }
            Solution ob = new Solution();
            boolean ans = ob.special(matrix, n);
            System.out.println(ans);
        }
    }
}
